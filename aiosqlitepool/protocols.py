from typing import (
    Protocol,
    runtime_checkable,
    Any,
    AsyncIterator,
    Optional,
    Tuple,
    List,
)


@runtime_checkable
class Cursor(Protocol):
    async def fetchone(self) -> Optional[Any]: ...
    async def fetchall(self) -> List[Any]: ...
    async def close(self) -> None: ...

    @property
    def lastrowid(self) -> Optional[int]: ...
    @property
    def rowcount(self) -> int: ...
    @property
    def description(
        self,
    ) -> Tuple[Tuple[str, None, None, None, None, None, None], ...]: ...


@runtime_checkable
class Connection(Protocol):
    async def execute(self, sql: str, parameters: Any = ()) -> Cursor: ...
    async def executescript(self, sql_script: str) -> None: ...
    async def commit(self) -> None: ...
    async def rollback(self) -> None: ...
    async def close(self) -> None: ...

    @property
    def is_closed(self) -> bool: ...
